#!/usr/bin/env python3
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))
import pseudo_python
import pseudo_python.errors
import yaml
from colorama import init
from termcolor import colored

def z():
    if len(sys.argv) == 1:
        print('pseudo-python <filename>')
        return

    filename = sys.argv[1]
    with open(filename, 'r') as f:
        source = f.read()
    try:
        yaml.Dumper.ignore_aliases = lambda *args : True
        clj = yaml.dump(pseudo_python.translate(source))
        base = filename.rpartition('.')[0]
        with open('%s.pseudo.yaml' % base, 'w') as f:
            f.write(clj)
    except pseudo_python.errors.PseudoError as e:
        print(colored(e, 'red'))
        if e.suggestions:
            print(colored(e, 'green'))
        if e.right:
            print(colored('\nright:\n%s' % e.right, 'green'))
        if e.wrong:
            print(colored('\nwrong:\n%s' % e.wrong, 'red'))

if __name__ == '__main__':
    z()

'''

error messages:

show normal messages, just errors and

show typecheck untranslatable messages with :
  eventually info about what is ok to be translated 
    comparable types are: Int, Float and String
  eventually better examples using source line/column info or code examples of supported
    def lala(e, f, *k): <- you can't use keyword arguments
    def function_name(arg_1, arg2_..)
'''

